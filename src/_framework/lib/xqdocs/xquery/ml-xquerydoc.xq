xquery version "1.0-ml" encoding "UTF-8";

(:
 : Licensed under the Apache License, Version 2.0 (the "License");
 : you may not use this file except in compliance with the License.
 : You may obtain a copy of the License at
 :
 :     http://www.apache.org/licenses/LICENSE-2.0
 :
 : Unless required by applicable law or agreed to in writing, software
 : distributed under the License is distributed on an "AS IS" BASIS,
 : WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 : See the License for the specific language governing permissions and
 : limitations under the License.
 :)
(:~ 
 :  This library module controls the parsing of XQuery xqdoc comments
 : 
 :  @author Jim Fuller, John Snelson
 :  @since Sept 18, 2011
 :  @version 0.1
 :)
module namespace xqd="http://github.com/xquery/xquerydoc";

declare default function namespace "http://github.com/xquery/xquerydoc";

declare namespace doc="http://www.xqdoc.org/1.0";

import module namespace xqp="XQueryML30" at "./parsers/XQueryML30.xq";
import module namespace xqdc="XQDocComments" at "./parsers/XQDocComments.xq";
import module namespace util="http://github.com/xquery/xquerydoc/utils" at "./ml-utils.xq";

declare (: private :) function _trimStringLiteral($literal as xs:string) as xs:string
{
  fn:substring($literal, 2, fn:string-length($literal) - 2)
};

declare (: private :) function _localname($qname as xs:string) as xs:string
{
  let $localname := fn:substring-after($qname, ":")
  return if($localname = "") then $qname else $localname
};

declare (: private :) function _type($t as element(SequenceType)?)
{
  if(fn:empty($t)) then () else
  element doc:type {
    if($t/OccurrenceIndicator) then
      attribute occurrence { $t/OccurrenceIndicator/TOKEN/fn:string() } else (),
    if($t/ItemType) then $t/ItemType/fn:string() else $t/fn:string()
  }
};

declare (: private :) function _commentContents($e)
{
  typeswitch($e)
  case element(Char) return $e/node()
  case element(ElementContentChar) return $e/node()
  case element(QuotAttrContentChar) return $e/node()
  case element(AposAttrContentChar) return $e/node()
  case element(DirElemConstructor) return element { $e/Tag[1] } {
    for $c in $e/* return _commentContents($c)
  }
  case element(DirAttrConstructor) return attribute { $e/Tag } {
    fn:string-join(for $c in $e/* return _commentContents($c)/fn:string(), "")
  }
  default return for $c in $e/* return _commentContents($c)
};

declare (: private :) function _comment($e as element()+)
{
  let $texts := 
    if($e instance of element(AnnotatedDecl) or $e instance of element(LibraryModule)) 
    then $e/preceding-sibling::text()[1]
    else $e/node()[1]/self::text()
  let $log := xdmp:log($texts)
  for $text in $texts
  let $markup := xqdc:parse-Comments($text)
  for $comment in ($markup/XQDocComment)[fn:last()]
  return element doc:comment {
    if($comment/Contents) then element doc:description {
      _commentContents($comment/Contents)
    } else (),
    for $tag in $comment/TaggedContents
    let $name := $tag/Tag/fn:string()
    return if($name = ("author", "version", "param", "return", "error", "deprecated", "see", "since"))
      then element { fn:QName("http://www.xqdoc.org/1.0", fn:concat("doc:", $name)) } {
        _commentContents($tag/Contents)
      } else element doc:custom {
        attribute tag { $name },
        _commentContents($tag/Contents)
      }
  }
};


(:~ 
 :  main entrypoint into xquerydoc
 :
 : @param xquery parsed as string
 : 
 : @returns element(doc:xqdoc)
 :)
declare function parse($module as xs:string){
  parse($module,'')
};


(:~ 
 : entrypoint into xquerydoc
 :
 : @param xquery parsed as string
 : @param processing mode (may DEPRECATE?)
 : 
 : @returns element(doc:xqdoc)
 :)
declare function parse($module as xs:string, $mode as xs:string)
{
  let $markup := xqp:parse-XQuery($module)
  let $module := $markup/Module/(MainModuleSequence/MainModule | LibraryModule)
  return element doc:xqdoc {
    element doc:control {
      comment { "Generated by xquerydoc: http://github.com/xquery/xquerydoc" },
      element doc:date {if($mode eq 'test') then () else fn:current-dateTime()},
      element doc:version { "N/A" }
    },
    _comment($module),
    element doc:module {
      attribute type { if($module/self::MainModule) then "main" else "library" },
      element doc:prefix {fn:string($module/ModuleDecl/NCNAME)},
      element doc:uri { if($module/ModuleDecl/URILiteral/(text()|StringLiteral)) then  _trimStringLiteral($module/ModuleDecl/URILiteral/(text()|StringLiteral)) else () },
      if ($module/(ModuleDecl | self::MainModule/Prolog/Import/ModuleImport)) then _comment($module/(ModuleDecl | self::MainModule/Prolog/Import/ModuleImport)) else ()
      (: TBD name and body - jpcs :)
    },

    (: TBD imports - jpcs :)
    element doc:variables {
      for $v in $module/Prolog/(VarDecl|AnnotatedDecl/VarDecl)
      return element doc:variable {
        element doc:uri { _localname($v/VarName/EQName/QName/FunctionQName/QName) },
        _type($v/TypeDeclaration/SequenceType),
        _comment($v)
      }
    },

    element doc:functions {
      for $f in $module/Prolog/(FunctionDecl|AnnotatedDecl/FunctionDecl)
      return element doc:function {
        _comment($f/parent::*),
        element doc:name { _localname($f/EQName/QName/FunctionQName/QName) },
        element doc:signature {
          fn:string-join(("(", $f/ParamList/fn:string(), ")",
            if($f/SequenceType) then (" as ", $f/SequenceType/fn:string()) else ()
            ), "")
        },
        element doc:source {
        attribute xml:space {"preserve"},
        fn:string($f)
        },
        if($f/ParamList) then element doc:parameters {
          for $p in $f/ParamList/Param
          return element doc:parameter {
            element doc:name { _localname($p/EQName/QName/FunctionQName/QName) },
            (_type($p/TypeDeclaration/SequenceType))[1]
          }
        } else (),
        if($f/SequenceType) then element doc:return {
          _type($f/SequenceType)
        } else ()
        (: TBD invoked and ref-variable - jpcs :)
        (: TBD body - jpcs :)
      }
    }
  }
};

(:~ 
 :  example function for generating html from within XQuery, will need to employ processor specific method of invoking XSLT 
 :
 : @param type determining xquery main or library module  
 : @param xquery parsed as xqdoc
 : @param xquery original source
 : 
 : @returns element(html:html)
 :)
declare function generate-docs($type as xs:string,$xqdoc as element(doc:xqdoc),$source as xs:string){
  util:generate-html-module($xqdoc,$source)
};
