<html xmlns="http://www.w3.org/1999/xhtml" version="-//W3C//DTD XHTML 1.1//EN">
	<head>
	  <title>xqDoc - </title>
	  <style type="text/css">
          body {
          font-family: Helvetica;
          padding: 0.5em  1em;
          }
          pre {
          font-family: Inconsolata, Consolas, monospace;
          }
          ol.results {
          padding-left: 0;
          }
          .footer {
          text-align:right;
          border-top: solid 4px;
          padding: 0.25em 0.5em;
          font-size: 85%;
          color: #999;
          }
          li.result {
          list-style-position: inside;
          list-style: none;
          height:140px;
          }
          h2 {
          display: inline-block;
          margin: 0;
          }

          h2 a,
          .result h3 a {
          text-decoration: inherit;
          color: inherit;
          }
          h3{
	  font-size: 140%;
	  background-color: #aaa;
	  border-bottom: 1px solid #99f;
	  width: 100%;
	  }
          h4{
	  font-size: 100%;
	  background-color: #ddd;
	  width: 50%;
	  }

          .namespace {
          color: #999;
          }
          .namespace:before {
          content: "{";
          }
          .namespace:after {
          content: "}";
          }
          table{
          width:75%;
          float:right;
          }
          td {
          height:100px;
          width:50%;
          vertical-align:text-top;
          }
        </style>
	  <script src="src/tests/result/resource/prettify.js" type="text/javascript">  </script>
	  <script src="src/tests/result/resource/lang-xq.js" type="text/javascript">  </script>
	  <link rel="stylesheet" type="text/css" href="src/tests/result/resource/prettify.css"> </link>
	</head>
	<body class="home"><div id="main"><h1><span class="namespace">http://marklogic.com/json</span>  library module </h1><h5>Comment</h5><p> This is an example xquery file taken from several files to demonstrate xqdoc commenting  Sample usage:    example bold tag     Proin facilisis ultrices velit id bibendum. Curabitur eu nisi velit, vel pharetra  eros. Fusce eu metus sem. Etiam sed risus ultrices turpis blandit placerat. Suspendisse  eu massa arcu, eget feugiat arcu. Donec eget rutrum nisi. Vivamus eget massa libero.  Pellentesque placerat tortor elit. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Sed molestie odio lacinia eros iaculis laoreet.  </p>
    Author:  Jim Fuller 
    v. 1  <h3>Variables</h3><ul>
	      <li>new-line-regex xs:string</li>
	    </ul><h3>Functions</h3><h4>Function <pre class="prettyprint lang-xq"><u>escape</u>($s as xs:string) as  xs:string</pre></h4><h5>Params</h5><ul>
	      <li>s:  xs:string</li>
	    </ul><h5>Returns</h5><ul>
	      <li>:  xs:string</li>
	    </ul><h4>Function <pre class="prettyprint lang-xq"><u>print-value</u>($x as element()) as  xs:string</pre></h4><h5>Params</h5><ul>
	      <li>x:  element()</li>
	    </ul><h5>Returns</h5><ul>
	      <li>:  xs:string</li>
	    </ul><h4>Function <pre class="prettyprint lang-xq"><u>print-name-value</u>($x as element()) as  xs:string?</pre></h4><h5>Params</h5><ul>
	      <li>x:  element()</li>
	    </ul><h5>Returns</h5><ul>
	      <li>:  xs:string</li>
	    </ul><h4>Function <pre class="prettyprint lang-xq"><u>serialize</u>($x as element()) as  xs:string</pre></h4><h5>Comment</h5><p> Transforms an XML element into a JSON string representation.  See http://json.org.  Sample usage:    xquery version "1.0-ml";   import module namespace json="http://marklogic.com/json" at "json.xqy";   json:serialize(&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;kid&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;)  Sample transformations:  Namespace URIs are ignored.  Namespace prefixes are included in the JSON name. Attributes are ignored, except for the special attribute </p>="true" that indicates the JSON serialization should write the node, even if single, as an array, and the attribute  that can be set to "boolean" or "number" to dictate the value should be written as that type (unquoted).  There's also an  attribute that when set to true writes the inner content as text rather than as structured JSON, useful for sending some XHTML over the wire. Text nodes within mixed content are ignored.  $x Element node to convert  String holding JSON serialized representation of $x 
    Author:  Jason Hunter 
    v. 1.0.1  Ported to xquery 1.0-ml; double escaped backslashes in json:escape<h5>Params</h5><ul>
	      <li>x:  element()</li>
	    </ul><h5>Returns</h5><ul>
	      <li>:  xs:string</li>
	    </ul><h3>Original Source Code</h3><pre class="prettyprint lang-xq">xquery version "1.0-ml";


(:~
 : This is an example xquery file taken from several files to demonstrate xqdoc commenting
 : 
 : Sample usage:
 : &lt;b&gt;
 :   example bold tag
 : &lt;/b&gt;  
  : 
 : Proin facilisis ultrices velit id bibendum. Curabitur eu nisi velit, vel pharetra 
 : eros. Fusce eu metus sem. Etiam sed risus ultrices turpis blandit placerat. Suspendisse 
 : eu massa arcu, eget feugiat arcu. Donec eget rutrum nisi. Vivamus eget massa libero. 
 : Pellentesque placerat tortor elit. Vestibulum ante ipsum primis in faucibus orci luctus
 : et ultrices posuere cubilia Curae; Sed molestie odio lacinia eros iaculis laoreet. 
 :
 :
 : @author Jim Fuller
 : @version 1
 : 
 : 
:)

module namespace json = "http://marklogic.com/json";
declare namespace test="test";

declare default function namespace "http://www.w3.org/2005/xpath-functions";

declare variable $new-line-regex as xs:string := concat('[',codepoints-to-string((13, 10)),']+');

(: Need to backslash escape any double quotes, backslashes, newlines and tabs :)
declare function json:escape($s as xs:string) as xs:string {
  let $s := replace($s, "(\\|"")", "\\$1")
  let $s := replace($s, $new-line-regex, "\\n")
  let $s := replace($s, codepoints-to-string(9), "\\t")
  return $s
};

(: Print the thing that comes after the colon :)
declare function json:print-value($x as element()) as xs:string {
  if (count($x/*) = 0) then
    json:atomize($x)
  else if ($x/@quote = "true") then
    concat('"', json:escape(xdmp:quote($x/node())), '"')
  else
    string-join(('{',
      string-join(for $i in $x/* return json:print-name-value($i), ","),
    '}'), "")
};

(: Print the name and value both :)
declare function json:print-name-value($x as element()) as xs:string? {
  let $name := name($x)
  let $later-in-array := some $s in $x/following-sibling::* satisfies name($s) = $name
  return
  if ($later-in-array) then
    ()
  else 
    ()
};

(:~
 : Transforms an XML element into a JSON string representation.  See http://json.org.
 : 
 : Sample usage:
 : &lt;pre&gt;
 :   xquery version "1.0-ml";
 :   import module namespace json="http://marklogic.com/json" at "json.xqy";
 :   json:serialize(&amp;lt;foo&amp;gt;&amp;lt;bar&amp;gt;kid&amp;lt;/bar&amp;gt;&amp;lt;/foo&amp;gt;)
 : &lt;/pre&gt;
 : Sample transformations:
 : 
 : Namespace URIs are ignored.  Namespace prefixes are included in the JSON name.
 :
 : Attributes are ignored, except for the special attribute @array="true" that
 : indicates the JSON serialization should write the node, even if single, as an
 : array, and the attribute @type that can be set to "boolean" or "number" to
 : dictate the value should be written as that type (unquoted).  There's also
 : an @quote attribute that when set to true writes the inner content as text
 : rather than as structured JSON, useful for sending some XHTML over the
 : wire.
 :
 : Text nodes within mixed content are ignored.
 :
 : @param $x Element node to convert
 : @return String holding JSON serialized representation of $x
 :
 : @author Jason Hunter
 : @version 1.0.1
 : 
 : Ported to xquery 1.0-ml; double escaped backslashes in json:escape
:)
declare function json:serialize($x as element())  as xs:string {
  string-join(('{', json:print-name-value($x), '}'), "")
};

</pre><br/><div class="footer"><p style="text-align:right"><i/> |
          generated by xquerydoc <a href="https://github.com/xquery/xquerydoc" target="xquerydoc">https://github.com/xquery/xquerydoc</a></p></div></div><script type="application/javascript">
	  window.onload = function(){ prettyPrint(); }
	</script></body>
      </html>
